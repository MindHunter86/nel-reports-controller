// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package app

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	http "net/http"
	url "net/url"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonBd361432DecodeGithubComMindHunter86NelReportsControllerApp(in *jlexer.Lexer, out *ReportBatch) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reports":
			if in.IsNull() {
				in.Skip()
				out.Reports = nil
			} else {
				in.Delim('[')
				if out.Reports == nil {
					if !in.IsDelim(']') {
						out.Reports = make([]NelReport, 0, 0)
					} else {
						out.Reports = []NelReport{}
					}
				} else {
					out.Reports = (out.Reports)[:0]
				}
				for !in.IsDelim(']') {
					var v1 NelReport
					(v1).UnmarshalEasyJSON(in)
					out.Reports = append(out.Reports, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Time).UnmarshalJSON(data))
			}
		case "collector_url":
			easyjsonBd361432DecodeNetUrl(in, &out.CollectorURL)
		case "client_ip":
			out.ClientIP = string(in.String())
		case "client_user_agent":
			out.ClientUserAgent = string(in.String())
		case "header":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Header = make(http.Header)
				} else {
					out.Header = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 []string
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						in.Delim('[')
						if v2 == nil {
							if !in.IsDelim(']') {
								v2 = make([]string, 0, 4)
							} else {
								v2 = []string{}
							}
						} else {
							v2 = (v2)[:0]
						}
						for !in.IsDelim(']') {
							var v3 string
							v3 = string(in.String())
							v2 = append(v2, v3)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Header)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd361432EncodeGithubComMindHunter86NelReportsControllerApp(out *jwriter.Writer, in ReportBatch) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Reports) != 0 {
		const prefix string = ",\"reports\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v4, v5 := range in.Reports {
				if v4 > 0 {
					out.RawByte(',')
				}
				(v5).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Time).MarshalJSON())
	}
	if true {
		const prefix string = ",\"collector_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonBd361432EncodeNetUrl(out, in.CollectorURL)
	}
	if in.ClientIP != "" {
		const prefix string = ",\"client_ip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClientIP))
	}
	if in.ClientUserAgent != "" {
		const prefix string = ",\"client_user_agent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClientUserAgent))
	}
	if len(in.Header) != 0 {
		const prefix string = ",\"header\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v6First := true
			for v6Name, v6Value := range in.Header {
				if v6First {
					v6First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v6Name))
				out.RawByte(':')
				if v6Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v7, v8 := range v6Value {
						if v7 > 0 {
							out.RawByte(',')
						}
						out.String(string(v8))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReportBatch) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd361432EncodeGithubComMindHunter86NelReportsControllerApp(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReportBatch) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd361432EncodeGithubComMindHunter86NelReportsControllerApp(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReportBatch) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd361432DecodeGithubComMindHunter86NelReportsControllerApp(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReportBatch) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd361432DecodeGithubComMindHunter86NelReportsControllerApp(l, v)
}
func easyjsonBd361432DecodeNetUrl(in *jlexer.Lexer, out *url.URL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "scheme":
			out.Scheme = string(in.String())
		case "opaque":
			out.Opaque = string(in.String())
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(url.Userinfo)
				}
				easyjsonBd361432DecodeNetUrl1(in, out.User)
			}
		case "host":
			out.Host = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "raw_path":
			out.RawPath = string(in.String())
		case "omit_host":
			out.OmitHost = bool(in.Bool())
		case "force_query":
			out.ForceQuery = bool(in.Bool())
		case "raw_query":
			out.RawQuery = string(in.String())
		case "fragment":
			out.Fragment = string(in.String())
		case "raw_fragment":
			out.RawFragment = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd361432EncodeNetUrl(out *jwriter.Writer, in url.URL) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Scheme != "" {
		const prefix string = ",\"scheme\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Scheme))
	}
	if in.Opaque != "" {
		const prefix string = ",\"opaque\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Opaque))
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonBd361432EncodeNetUrl1(out, *in.User)
	}
	if in.Host != "" {
		const prefix string = ",\"host\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Host))
	}
	if in.Path != "" {
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Path))
	}
	if in.RawPath != "" {
		const prefix string = ",\"raw_path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RawPath))
	}
	if in.OmitHost {
		const prefix string = ",\"omit_host\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.OmitHost))
	}
	if in.ForceQuery {
		const prefix string = ",\"force_query\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ForceQuery))
	}
	if in.RawQuery != "" {
		const prefix string = ",\"raw_query\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RawQuery))
	}
	if in.Fragment != "" {
		const prefix string = ",\"fragment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Fragment))
	}
	if in.RawFragment != "" {
		const prefix string = ",\"raw_fragment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RawFragment))
	}
	out.RawByte('}')
}
func easyjsonBd361432DecodeNetUrl1(in *jlexer.Lexer, out *url.Userinfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd361432EncodeNetUrl1(out *jwriter.Writer, in url.Userinfo) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjsonBd361432DecodeGithubComMindHunter86NelReportsControllerApp1(in *jlexer.Lexer, out *NelReport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "age":
			out.Age = int(in.Int())
		case "report_type":
			out.ReportType = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "user_agent":
			out.UserAgent = string(in.String())
		case "referrer":
			out.Referrer = string(in.String())
		case "sampling_fraction":
			out.SamplingFraction = float32(in.Float32())
		case "server_ip":
			out.ServerIP = string(in.String())
		case "protocol":
			out.Protocol = string(in.String())
		case "method":
			out.Method = string(in.String())
		case "status_code":
			out.StatusCode = int(in.Int())
		case "elapsed_time":
			out.ElapsedTime = int(in.Int())
		case "phase":
			out.Phase = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "raw_body":
			if in.IsNull() {
				in.Skip()
				out.RawBody = nil
			} else {
				out.RawBody = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd361432EncodeGithubComMindHunter86NelReportsControllerApp1(out *jwriter.Writer, in NelReport) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Age != 0 {
		const prefix string = ",\"age\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Age))
	}
	if in.ReportType != "" {
		const prefix string = ",\"report_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ReportType))
	}
	if in.URL != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	if in.UserAgent != "" {
		const prefix string = ",\"user_agent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserAgent))
	}
	if in.Referrer != "" {
		const prefix string = ",\"referrer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Referrer))
	}
	if in.SamplingFraction != 0 {
		const prefix string = ",\"sampling_fraction\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.SamplingFraction))
	}
	if in.ServerIP != "" {
		const prefix string = ",\"server_ip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ServerIP))
	}
	if in.Protocol != "" {
		const prefix string = ",\"protocol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Protocol))
	}
	if in.Method != "" {
		const prefix string = ",\"method\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Method))
	}
	if in.StatusCode != 0 {
		const prefix string = ",\"status_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.StatusCode))
	}
	if in.ElapsedTime != 0 {
		const prefix string = ",\"elapsed_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ElapsedTime))
	}
	if in.Phase != "" {
		const prefix string = ",\"phase\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Phase))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if len(in.RawBody) != 0 {
		const prefix string = ",\"raw_body\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.RawBody)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NelReport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd361432EncodeGithubComMindHunter86NelReportsControllerApp1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NelReport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd361432EncodeGithubComMindHunter86NelReportsControllerApp1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NelReport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd361432DecodeGithubComMindHunter86NelReportsControllerApp1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NelReport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd361432DecodeGithubComMindHunter86NelReportsControllerApp1(l, v)
}
